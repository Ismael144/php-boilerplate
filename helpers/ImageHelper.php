<?php

namespace App\helpers;

use App\core\Helper;

class ImageHelper extends Helper
{
    /**
     * Path to images folder
     *
     * @var string
     */
    protected string $path;

    /**
     * Valid image extensions
     *
     * @var array
     */
    protected array $validExtensions;

    /**
     * Contains errors generated by the class
     *
     * @param string $errors
     */
    public string $errors = "";

    /**
     * Max size of the image 
     *
     * @var integer
     */
    protected float $maxImageSize = 5e6;
    // Max Image Size: 4.77 MB

    public const IMAGE_LIMIT = 5;

    public function __construct(
        public string $destination = ""
    ) {
        $this->validExtensions = ["png", "jpg", "jpeg", "gif", "webp", "avif"];
        // $this->path = __DIR__ . "/../crm/images/{$this->destination}/";
    } 

    public function getValidExtensions(): array 
    {
        return $this->validExtensions; 
    }

    /**
     * Uploads images to desired destination
     *
     * @param array|null $file
     * @param boolean $returnFileName
     * @return bool|string|null
     */
    function uploadImage(?array $files, string $path)
    {
        if (strlen($files['name']) !== 0) {
            $size = $files['size'];
            $error = $files['error'];
            $tmp_name = $files['tmp_name'];
            $file_name = $files['name'];

            $tmpExtension = explode('.', $file_name);
            $file_ext = strtolower(end($tmpExtension));

            $newFileName = "ICUC-" . uniqid() . "-". date("Y_m_d") .".$file_ext";

            $new_destination = $path . $newFileName;

            if ($files) {
                if (in_array($file_ext, $this->validExtensions)) {
                    if (!$error) {
                        if ($size < $this->maxImageSize) {
                                move_uploaded_file($tmp_name, $new_destination);
                        } else {
                            $this->errors = "The File You Uploaded Is Too Large";
                            return false;
                        }
                    } else {
                        $this->errors = "An Error Occured..";
                        return false;
                    }
                } else {
                    $this->errors = "File of type '$file_ext' is not allowed";
                    return false;
                }
            } else {
                return false;
            }

            return $newFileName;
        }
    }

    /**
     * Undocumented function
     *
     * @param array|null $imageName
     * @return true
     */
    final public function renameImage(string $oldname, string $newname)
    {
        $array_file_name = explode('.', $oldname);
        $oldname = $this->path . $oldname;
        $file_extension = end($array_file_name);
        $filename = $newname . '.' . $file_extension;
        $newname = $this->path . $newname . '.' . $file_extension;

        if (rename($oldname, $newname)) {
            $fb = true;
            $this->errors = $filename;
        } else {
            $fb = false;
            $this->errors = 'Error renaming file';
        }

        return $fb;
    }

    /**
     * Deletes images
     *
     * @param string $filename
     * @return bool
     */
    public function removeImage(string $path, string $filename)
    {
        $target_file = $path . $filename;
        $fb = true;
        if (file_exists($target_file)) {
            if (unlink($target_file)) {
                $fb = true;
            } else {
                $fb = false;
                $this->errors = 'Error deleting file';
            }
        } else {
            $fb = false;
        }

        return $fb;
    }
}
